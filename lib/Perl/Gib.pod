=head1 Perl::Gib

Generate Perl project documentation and run module test scripts.

 use Perl::Gib;
 my $perlgib = Perl::Gib->new();
 $perlgib->doc();

=head1 Methods

=head2 C<sub html($self); #209>

Create output directory, copy assets (CSS, JS, fonts), generate HTML
content and write it to files.

 use File::Find;
 use Path::Tiny;
 
 use Perl::Gib::Config;
 
 my $dir = Path::Tiny->tempdir;
 
 Perl::Gib::Config->initialize(output_path => $dir);
 
 my $perlgib = Perl::Gib->new();
 $perlgib->html();
 
 my @wanted = (
     path( $dir, "Perl/Gib.html" ),
     path( $dir, "Perl/Gib/App.html" ),
     path( $dir, "Perl/Gib/App/CLI.html" ),
     path( $dir, "Perl/Gib/Config.html" ),
     path( $dir, "Perl/Gib/Markdown.html" ),
     path( $dir, "Perl/Gib/Module.html" ),
     path( $dir, "Perl/Gib/Template.html" ),
     path( $dir, "Perl/Gib/Usage.html" ),
     path( $dir, "index.html" ),
 );
 
 my @docs;
 find( sub { push @docs, $File::Find::name if ( -f && /\.html$/ ); }, $dir );
 @docs = sort @docs;
 
 is_deeply( \@docs, \@wanted, 'all docs generated' );
 
 $dir->remove_tree( { safe => 0 } );
 
 Perl::Gib::Config->_clear_instance();

=head2 C<sub test($self); #255>

Run project modules test scripts.

=head2 C<sub markdown($self); #300>

Create output directory, generate Markdown content and write it to
files.

 use File::Find;
 use Path::Tiny;
 
 use Perl::Gib::Config;
 
 my $dir = Path::Tiny->tempdir;
 
 Perl::Gib::Config->new(output_path => $dir);
 
 my $perlgib = Perl::Gib->new();
 $perlgib->markdown();
 
 my @wanted = (
     path( $dir, "Perl/Gib.md" ),
     path( $dir, "Perl/Gib/App.md" ),
     path( $dir, "Perl/Gib/App/CLI.md" ),
     path( $dir, "Perl/Gib/Config.md" ),
     path( $dir, "Perl/Gib/Markdown.md" ),
     path( $dir, "Perl/Gib/Module.md" ),
     path( $dir, "Perl/Gib/Template.md" ),
     path( $dir, "Perl/Gib/Usage.md" ),
 );
 
 my @docs;
 find( sub { push @docs, $File::Find::name if ( -f && /\.md$/ ); }, $dir );
 @docs = sort @docs;
 
 is_deeply( \@docs, \@wanted, 'all docs generated' );
 
 $dir->remove_tree( { safe => 0 } );
 
 Perl::Gib::Config->_clear_instance();

=head2 C<sub pod($self); #352>

Create output directory, generate Pod content and write it to files.

 use File::Find;
 use Path::Tiny;
 
 use Perl::Gib::Config;
 
 my $dir = Path::Tiny->tempdir;
 
 Perl::Gib::Config->new(output_path => $dir);
 
 my $perlgib = Perl::Gib->new();
 $perlgib->pod();
 
 my @wanted = (
     path( $dir, "Perl/Gib.pod" ),
     path( $dir, "Perl/Gib/App.pod" ),
     path( $dir, "Perl/Gib/App/CLI.pod" ),
     path( $dir, "Perl/Gib/Config.pod" ),
     path( $dir, "Perl/Gib/Markdown.pod" ),
     path( $dir, "Perl/Gib/Module.pod" ),
     path( $dir, "Perl/Gib/Template.pod" ),
     path( $dir, "Perl/Gib/Usage.pod" ),
 );
 
 my @docs;
 find( sub { push @docs, $File::Find::name if ( -f && /\.pod$/ ); }, $dir );
 @docs = sort @docs;
 
 is_deeply( \@docs, \@wanted, 'all docs generated' );
 
 $dir->remove_tree( { safe => 0 } );
 
 Perl::Gib::Config->_clear_instance();

=cut

#Pod::HTML2Pod conversion notes:
# 3203 bytes of input
#Mon Sep  6 18:20:37 2021 tschaefer
# No a_name switch not specified, so will not try to render <a name='...'>
# Will try to render <a href='...'>
