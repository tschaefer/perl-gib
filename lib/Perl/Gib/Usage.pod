=head1 perlgib

B<perlgib> is Perl's alternative documentation and test manager.

=head2 Introduction

B<perlgib> generates HTML, Markdown and Pod documentation and runs
tests from Perl code comment lines.

=head2 Installation

 $ perl Makefile.pl
 $ make dist
 $ VERSION=$(perl -Ilib -le 'require "./lib/Perl/Gib.pm"; print $Perl::Gib::VERSION')
 $ cpanm Perl-Gib-$VERSION.tar.gz

=head2 Usage

Simply run C<perlgib doc> - HTML files including an index file are
placed in C<doc> - or C<perlgib test> from within your Perl project.
Beside Perl modules also Markdown files are processed.

For further information about the command line tool C<perlgib> see the
following help output.

 Usage:
     perlgib --help|-h | --man|-m | --version|-v
 
     perlgib [OPTIONS] doc | test [OPTIONS]
 
 Options:
   base:
     --help|-h
             Print short usage help.
 
     --man|-m
             Print extended usage help.
 
     --version|-v
             Print version string.
 
     --library-path PATH
             Directory with documents (Perl modules, Markdown files) to
             process, default lib in current working directory.
 
     --library-name NAME
             Library name.
 
   doc:
     Build library documentation.
 
     --output-path
             Documentation output path, default doc in current working
             directory.
 
     --output-format html|markdown|pod|all
             Documentation output format, default html.
 
     --document-private-items
             Document private items.
 
     --document-ignored-items
             Document ignored items (#[ignore(item)]).
 
     --ignore-undocumented-items
         Ignore undocumented items.
 
     --no-html-index
             Prevent creating of html index.
 
   test:
     Execute documentation tests.

The B<Perl::Gib> API documentation is generated by running C<perlgib>
from within this Perl distribution.

=head2 Items

B<Perl::Gib> iterates through the library path and processes following
item documentation comment lines in the found Perl Modules.

=over

=item * package (module) itself

=item * subroutines (methods)

=back

If the postmodern object system for Perl 5 Moose
(https://metacpan.org/pod/Moose) is detected, following additional
items are processed.

=over

=item * attributes C<has>

=item * method modifiers C<before>, C<after>, C<around>, C<augment>,
C<override>.

=back

=head2 Comments

A B<package> documentation comment line starts with two hashes followed
by an exclamation mark.

 ##! Package documentation comment line.

The documentation comment block must be placed after the namespace
line.

 package Acme::Corporation;
 
 ##! The Acme Corporation is a fictional corporation that features
 ##! prominently in the Road Runner/Wile E. Coyote animated shorts as a
 ##! running gag featuring outlandish products that fail or backfire
 ##! catastrophically at the worst possible times.

A documentation comment line for all the other above listed Perl module
items starts with three hashes.

 ### Other item documentation comment line.

The documentation comment block must be placed before the item.

 ### Acme American wrought anvils.
 has 'anvils' => (
     is      => 'ro',
     isa     => 'Int',
     default => 10,
 );
 
 ### Hit an anvil.
 ###
 ### It rings like a bell.
 sub hit {
     my $self = shift;
 
     return "ring";
 }

=head2 Tests

A test block starts and ends with three apostrophe.

 ### ```

Test blocks must be placed in a subroutine / method documentation
comment block.

 ### Test the wrought anvil.
 ###
 ### ```
 ###     my $bell = hit();
 ###
 ###     is( $bell, "ring");
 ### ```
 sub hit {
     ...

The package itself and Test::More (https://metacpan.org/pod/Test::More)
are included by default. The code is placed in a subtest named by the
subroutine. The final module test scipts are run by prove
(https://metacpan.org/pod/distribution/Test-Harness/bin/prove).

=head2 Exceptions

All I<private> items - item name starting with an underscore - are
ignored. Items with a first documentation comment line contenting a
I<pseudo> method are also ignored.

 ##! #[ignore(item)]

The whole package (module) is skipped.

 ### #[ignore(item)]

This ignores the followed item.

=head2 Licenses

The "Artistic License" (http://dev.perl.org/licenses/artistic.html).

Further licenses see C<lib/Perl/Gib/resources/assets>

=over

=item * C<css/highlight.css>

=item * C<css/normalize.css>

=item * C<js/highlight.min.js>

=back

=cut

#Pod::HTML2Pod conversion notes:
# 5066 bytes of input
#Fri Aug 20 07:50:42 2021 tschaefer
# No a_name switch not specified, so will not try to render <a name='...'>
# Will try to render <a href='...'>
